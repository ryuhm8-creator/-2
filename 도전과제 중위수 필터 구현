#define PIN_LED  9
#define PIN_TRIG 12
#define PIN_ECHO 13

#define SND_VEL 346.0
#define INTERVAL 25
#define PULSE_DURATION 10
#define _DIST_MIN 100
#define _DIST_MAX 300

#define TIMEOUT ((INTERVAL / 2) * 1000.0)
#define SCALE (0.001 * 0.5 * SND_VEL)
#define MEDIAN_FILTER_SIZE 30

unsigned long last_sampling_time;
float sampleBuffer[MEDIAN_FILTER_SIZE];
int bufIndex = 0;
bool bufFilled = false;

void setup() {
  pinMode(PIN_LED, OUTPUT);
  pinMode(PIN_TRIG, OUTPUT);
  pinMode(PIN_ECHO, INPUT);
  digitalWrite(PIN_TRIG, LOW);
  Serial.begin(57600);
}

void loop() {
  float dist_raw, dist_median;

  // 샘플링 주기
  if (millis() < last_sampling_time + INTERVAL)
    return;

  dist_raw = USS_measure(PIN_TRIG, PIN_ECHO);

  // 측정 오류 시 중위수 필터만 동작, valid값 사용 금지
  if ((dist_raw == 0.0) || (dist_raw > _DIST_MAX) || (dist_raw < _DIST_MIN)) {
    // LED OFF (측정 오류)
    digitalWrite(PIN_LED, 1);
    last_sampling_time += INTERVAL;
    return;
  }

  sampleBuffer[bufIndex] = dist_raw;
  bufIndex++;
  if (bufIndex >= MEDIAN_FILTER_SIZE) {
    bufIndex = 0;
    bufFilled = true;
  }

  // buffer가 다 안채워졌으면 현재값 사용, 다 채워졌으면 median 사용
  if (!bufFilled) {
    dist_median = dist_raw;
  } else {
    dist_median = calcMedian(sampleBuffer, MEDIAN_FILTER_SIZE);
  }

  // Serial로 결과 출력(중간값 점검)
  Serial.print("raw:"); Serial.print(dist_raw);
  Serial.print(", median:"); Serial.print(dist_median);
  Serial.print(", Min:"); Serial.print(_DIST_MIN);
  Serial.print(", Max:"); Serial.print(_DIST_MAX);
  Serial.println();

  // LED 제어: 중위수 필터 결과에만 근거
  digitalWrite(PIN_LED, 0);

  last_sampling_time += INTERVAL;
}

// 초음파 측정값 반환(mm)
float USS_measure(int TRIG, int ECHO) {
  digitalWrite(TRIG, HIGH);
  delayMicroseconds(PULSE_DURATION);
  digitalWrite(TRIG, LOW);
  return pulseIn(ECHO, HIGH, TIMEOUT) * SCALE;
}

// 중위수 계산 함수
float calcMedian(float* arr, int N) {
  float temp[N];
  for (int i = 0; i < N; i++) temp[i] = arr[i];
  // 버블 정렬
  for (int i = 0; i < N-1; i++)
    for (int j = i+1; j < N; j++)
      if (temp[i] > temp[j]) {
        float t = temp[i]; temp[i]=temp[j]; temp[j]=t;
      }
  if (N%2==1)
    return temp[N/2];
  else
    return (temp[N/2-1]+temp[N/2])/2.0;
}
